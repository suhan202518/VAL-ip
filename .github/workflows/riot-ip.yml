name: Riot IP Updater
on:
  schedule:
    - cron: "0 12 * * *"
  workflow_dispatch:

env:
  CF_API_KEY: ${{ secrets.CF_API_KEY }}
  CF_EMAIL: ${{ secrets.CF_EMAIL }}

jobs:
  generate-rule:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Validate Secrets
      run: |
        if [ -z "$CF_API_KEY" ] || [ -z "$CF_EMAIL" ]; then
          echo "::error::Cloudflare认证信息未正确配置"
          exit 1
        fi

    - name: Fetch IPs
      id: fetch_ips
      run: |
        # 带自动认证切换的重试机制
        RETRY_COUNT=0
        MAX_RETRY=3
        while [ $RETRY_COUNT -lt $MAX_RETRY ]; do
          HTTP_CODE=$(curl -s -o riot_cache.json -w "%{http_code}" \
            -H "X-Auth-Email: $CF_EMAIL" \
            -H "X-Auth-Key: $CF_API_KEY" \
            -H "Content-Type: application/json" \
            "https://api.cloudflare.com/client/v4/radar/asns/6507/prefixes?format=json")

          # 双重认证方式兼容
          if [ $HTTP_CODE -ne 200 ]; then
            curl -s -o riot_cache.json \
              -H "Authorization: Bearer $CF_API_KEY" \
              -H "Content-Type: application/json" \
              "https://api.cloudflare.com/client/v4/radar/asns/6507/prefixes?format=json"
            HTTP_CODE=$?
          fi

          if [ $HTTP_CODE -eq 200 ] && jq -e '.success == true and .result.ipv4_prefixes? | length > 0' riot_cache.json >/dev/null; then
            echo "API请求成功"
            break
          else
            RETRY_COUNT=$((RETRY_COUNT+1))
            echo "::warning::第${RETRY_COUNT}次请求失败 (HTTP ${HTTP_CODE})"
            sleep 10
          fi
        done

        if [ $RETRY_COUNT -eq $MAX_RETRY ]; then
          echo "::error::认证失败，请检查："
          echo "1. 是否使用了Global API Key（需在Cloudflare控制台生成）"
          echo "2. 是否开启Two-Factor认证（需关闭或使用API Token）"
          jq . riot_cache.json
          exit 1
        fi

        # 生成规则文件
        echo "payload:" > val-ip.yaml
        {
          echo "  - DOMAIN-SUFFIX,riotgames.com,🎮VALORANT"
          echo "  - DOMAIN-SUFFIX,valorantgame.com,🎮VALORANT"
          jq -r '.result.ipv4_prefixes[] | "  - IP-CIDR,\(.prefix),🎮VALORANT"' riot_cache.json
        } >> val-ip.yaml

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: valorant-rules
        path: val-ip.yaml

    - name: Deploy Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        publish_branch: gh-pages
        keep_files: true
