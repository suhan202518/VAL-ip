name: Riot IP Updater
on:
  schedule:
    - cron: "0 12 * * *"
  workflow_dispatch:

env:
  CF_TOKEN: ${{ secrets.CF_TOKEN }}

jobs:
  generate-rule:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
      actions: read
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Validate Configuration
      run: |
        # 安全验证密钥状态
        echo "配置诊断报告："
        echo "----------------------------------"
        echo "Secret名称: CF_TOKEN"
        echo "字符长度: ${#CF_TOKEN}"
        echo "首字符: ${CF_TOKEN:0:1}***${CF_TOKEN: -1}"
        echo "----------------------------------"
        
        if [ -z "$CF_TOKEN" ]; then
          echo "::error::❌ 密钥未配置 → 请到仓库Settings→Secrets→Actions创建CF_TOKEN"
          echo "::warning::📝 创建指引：https://dash.cloudflare.com/profile/api-tokens"
          exit 1
        fi

    - name: Fetch IPs
      id: fetch_ips
      run: |
        # 带调试信息的请求模块
        DEBUG_FILE="api_debug.log"
        
        for i in {1..3}; do
          echo "🔄 尝试第${i}次请求..."
          HTTP_STATUS=$(
            curl -si -o riot_cache.json -w "%{http_code}" \
              -H "Authorization: Bearer $CF_TOKEN" \
              -H "Content-Type: application/json" \
              "https://api.cloudflare.com/client/v4/radar/asns/6507/prefixes?format=json" \
              > $DEBUG_FILE
          )
          
          # 解析响应头
          CF_RAY=$(grep 'CF-RAY' $DEBUG_FILE | cut -d ' ' -f 2)
          
          if [ $HTTP_STATUS -eq 200 ]; then
            echo "✅ 请求成功 (CF-RAY: ${CF_RAY})"
            break
          else
            echo "::warning::⚠️ 请求失败 (HTTP ${HTTP_STATUS})"
            echo "调试线索："
            jq -c '{success,errors}' riot_cache.json
            echo "CF-RAY追踪码: ${CF_RAY}"
            sleep 10
          fi
        done

        if [ $HTTP_STATUS -ne 200 ]; then
          echo "::error::❌ 所有重试均失败"
          echo "::warning::可能原因："
          echo "1. 令牌权限不足（需要Zone.Read + Radar.Read）"
          echo "2. ASN编号错误（当前查询AS6507）"
          exit 1
        fi

        # 生成规则文件
        echo "payload:" > val-ip.yaml
        {
          echo "  - DOMAIN-SUFFIX,riotgames.com,🎮VALORANT"
          echo "  - DOMAIN-SUFFIX,valorantgame.com,🎮VALORANT"
          jq -r '.result.ipv4_prefixes[] | "  - IP-CIDR,\(.prefix),🎮VALORANT"' riot_cache.json
        } >> val-ip.yaml

    - name: Upload Rules
      uses: actions/upload-artifact@v4
      with:
        name: valorant-rules
        path: val-ip.yaml

    - name: Deploy to Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        publish_branch: gh-pages
        keep_files: true
