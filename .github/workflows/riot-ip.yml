name: Riot IP Updater
on:
  schedule:
    - cron: "0 12 * * *"
  workflow_dispatch:

jobs:
  generate-rule:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Validate Secrets
      id: secret_validation
      run: |
        # 硬性密钥存在性检查
        if [ -z "${{ secrets.CF_TOKEN }}" ]; then
          echo "::error::❌ 关键错误：CF_TOKEN未配置 → 立即修复：https://github.com/$GITHUB_REPOSITORY/settings/secrets/actions/new"
          echo "::warning::名称必须严格使用「CF_TOKEN」"
          echo "::warning::权限要求：Zone.Zone.Read + Radar.Radar.Read"
          exit 1
        fi
        
        # 环境变量长度验证
        TOKEN_LENGTH=${#SECRET_CONTENT}
        if [ $TOKEN_LENGTH -lt 50 ]; then
          echo "::error::❌ 密钥格式异常（有效Token应超过50字符）"
          echo "::warning::请确认复制了完整的API Token"
          exit 1
        fi
        echo "✅ 密钥基础验证通过"
      env:
        SECRET_CONTENT: ${{ secrets.CF_TOKEN }}

    - name: Fetch IP Data
      env:
        CF_API_TOKEN: ${{ secrets.CF_TOKEN }}
      run: |
        # 带失败重试的请求
        RESPONSE=$(curl --retry 3 --fail-with-body -s \
          -H "Authorization: Bearer $CF_API_TOKEN" \
          "https://api.cloudflare.com/client/v4/radar/asns/6507/prefixes?format=json")

        # API错误诊断
        if ! jq -e '.success == true' <<< "$RESPONSE"; then
          ERROR_MSG=$(jq -r '.errors[0].message' <<< "$RESPONSE")
          echo "::error::❌ Cloudflare API错误：$ERROR_MSG"
          echo "::warning::诊断建议："
          echo "1. 访问 https://dash.cloudflare.com/profile/api-tokens"
          echo "2. 确认Token包含以下权限："
          echo "   - Zone.Zone.Read"
          echo "   - Radar.Radar.Read"
          exit 1
        fi

        # 保存有效数据
        jq '.' <<< "$RESPONSE" > riot_cache.json

    - name: Generate Rules
      run: |
        # 生成YAML规则文件
        echo "payload:" > val-ip.yaml
        {
          echo "  - DOMAIN-SUFFIX,riotgames.com,🎮VALORANT"
          echo "  - DOMAIN-SUFFIX,valorantgame.com,🎮VALORANT"
          jq -r '.result.ipv4_prefixes[] | "  - IP-CIDR,\(.prefix),🎮VALORANT"' riot_cache.json
        } >> val-ip.yaml

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: game-rules
        path: val-ip.yaml

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./
        publish_branch: gh-pages
        keep_files: true
